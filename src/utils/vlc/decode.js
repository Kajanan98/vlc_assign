const unitTime=1000
const tolerance= 125


const morseToAlphabetMap = {
    ".-": "a",
    "-...": "b",
    "-.-.": "c",
    "-..": "d",
    ".": "e",
    "..-.": "f",
    "--.": "g",
    "....": "h",
    "..": "i",
    ".---": "j",
    "-.-": "k",
    ".-..": "l",
    "--": "m",
    "-.": "n",
    "---": "o",
    ".--.": "p",
    "--.-": "q",
    ".-.": "r",
    "...": "s",
    "-": "t",
    "..-": "u",
    "...-": "v",
    ".--": "w",
    "-..-": "x",
    "-.--": "y",
    "--..": "z",
    ".----": "1",
    "..---": "2",
    "...--": "3",
    "....-": "4",
    ".....": "5",
    "-....": "6",
    "--...": "7",
    "---..": "8",
    "----.": "9",
    "-----": "0",
    ".-.-.-": ".",
    "--..--": ",",
    "..--..": "?",
    ".----.": "'",
    "-.-.--": "!",
    "-..-.": "/",
    "-.--.": "(",
    "-.--.-": ")",
    ".-...": "&",
    "---...": ":",
    "-.-.-.": ";",
    "-...-": "=",
    ".-.-.": "+",
    "-....-": "-",
    "..--.-": "_",
    ".-..-.": '"',
    "...-..-": "$",
    ".--.-.": "@",
    " " : " ",
};

const removeZeros=(receivedData)=>{
    const signals = [...receivedData]

    while(signals.length >0 && signals[0][0]==0){
        signals.shift()
    }
    while(signals.length >0 && signals[signals.length-1][0]==0){
        signals.pop()
    }
    return signals
}

const getBinData=(signals)=>{
    const signalsWithTime = signals.map((signal)=>[signal[0], signal[1] -signals[0][1]])

    const groups = []
    for(let i=0;i <= Math.round((signalsWithTime[signalsWithTime.length-1][1])/1000); i++){
        groups.push([])
    }

    for(let i=0;i < signalsWithTime.length ; i++){
        const frameTime = signalsWithTime[i][1]
        const groupIndex= Math.floor(frameTime/1000)
        groups[groupIndex].push(signalsWithTime[i][0])
        // console.log(groupIndex ,frameTime )

        if(((groupIndex * unitTime + tolerance) >  frameTime) && groupIndex >0){
            groups[groupIndex - 1].push(signalsWithTime[i][0])
            // console.log(groupIndex - 1,frameTime, "-" )
        }

        if((((groupIndex + 1) * unitTime - tolerance) < frameTime) &&  groupIndex + 1 < signalsWithTime.length){
            groups[groupIndex + 1].push(signalsWithTime[i][0])
            // console.log(groupIndex + 1,frameTime, "+" )
        }
    }
    console.log(signalsWithTime);
    console.log(groups);

    const binData = groups.map(group => Math.round(group.length? group.reduce((a,b)=>a+b) / group.length : 0))
    return binData
}


const receivedData = [[0, 1685734049029], [0, 1685734049351],[1, 1685734045116, 0.7711796760559082], [1, 1685734045422, 0.8244856595993042], [1, 1685734045727, 0.5318138599395752], [1, 1685734046021, 0.16325372457504272], [0, 1685734046290], [0, 1685734046575], [0, 1685734046867], [0, 1685734047200],  [1, 1685734047495, 0.5274867415428162], [1, 1685734047789, 0.47203922271728516], [1, 1685734048148, 0.6137877702713013], [0, 1685734048414], [0, 1685734048702], [0, 1685734049029], [0, 1685734049351],  [1, 1685734049690, 0.6414192318916321],  [1, 1685734049992, 0.48844486474990845], [1, 1685734050319, 0.18961896002292633], [0, 1685734050674], [0, 1685734051012], [0, 1685734051310],  [1, 1685734051615, 0.3936951756477356], [1, 1685734051962, 0.6077044606208801], [1, 1685734052309, 0.43502381443977356],  [0, 1685734052610], [0, 1685734052945], [0, 1685734053351], [0, 1685734053641], [0, 1685734053941], [0, 1685734054215], [0, 1685734054508], [1, 1685734054863, 0.38348644971847534], [1, 1685734055227, 0.6048070788383484], [1, 1685734055535, 0.3470252454280853], [0, 1685734055805], [0, 1685734056101], [0, 1685734056371], [0, 1685734056675], [1, 1685734056963, 0.6871604919433594], [1, 1685734057308, 0.6205769181251526], [1, 1685734057651, 0.3497070372104645], [0, 1685734057993], [0, 1685734058296], [0, 1685734058584], [0, 1685734058888], [0, 1685734059217], [0, 1685734059523], [0, 1685734059825], [0, 1685734060128], [0, 1685734060408], [0, 1685734060725], [0, 1685734061052], [0, 1685734061381], [0, 1685734061669], [0, 1685734062023], [1, 1685734062349, 0.8342363834381104], [1, 1685734062662, 0.7172197699546814], [1, 1685734062973, 0.7398771643638611], [0, 1685734063261], [0, 1685734063558], [0, 1685734063895], [1, 1685734064191, 0.1929861158132553], [1, 1685734064519, 0.7789773941040039], [1, 1685734064830, 0.7576724886894226], [1, 1685734065159, 0.75440514087677], [1, 1685734065478, 0.7818828225135803], [1, 1685734065759, 0.5757330656051636], [1, 1685734066082, 0.7868819236755371], [0, 1685734066383], [0, 1685734066679], [0, 1685734066989], [1, 1685734067311, 0.5037110447883606], [1, 1685734067602, 0.8871880769729614], [1, 1685734067892, 0.5985936522483826], [1, 1685734068207, 0.3412327468395233], [0, 1685734068502], [0, 1685734068809], [0, 1685734069088], [0, 1685734069395], [0, 1685734069725], [0, 1685734070085], [0, 1685734070393], [1, 1685734070690, 0.8880152106285095], [1, 1685734070987, 0.8170556426048279], [1, 1685734071312, 0.8040737509727478], [0, 1685734071620], [0, 1685734071953], [0, 1685734072272], [0, 1685734072593], [1, 1685734072904, 0.9211692810058594], [1, 1685734073249, 0.7944088578224182], [1, 1685734073534, 0.6198093891143799], [1, 1685734073833, 0.6239466667175293], [1, 1685734074139, 0.09792378544807434], [1, 1685734074429, 0.3221665024757385], [1, 1685734074757, 0.34060749411582947], [1, 1685734075060, 0.17734383046627045], [1, 1685734075368, 0.18629233539104462], [1, 1685734075653, 0.04236753284931183], [0, 1685734075947], [0, 1685734076281], [1, 1685734076584, 0.20550183951854706], [1, 1685734076892, 0.2219761312007904], [1, 1685734077191, 0.20581039786338806], [1, 1685734077502, 0.16526088118553162], [1, 1685734077789, 0.16260379552841187], [1, 1685734078074, 0.17917703092098236], [1, 1685734078406, 0.2979852855205536], [1, 1685734078736, 0.25238677859306335], [1, 1685734079053, 0.33463096618652344], [1, 1685734079397, 0.07119020819664001], [0, 1685734079690], [1, 1685734079988, 0.19936634600162506]]

const decodeToBin = (receivedData)=>{
    try {
        const signals = removeZeros(receivedData)
        const binData = getBinData(signals)

        console.log(binData)
        return binData
    } catch (error) {
        console.log("Error in decode to bin")
        console.log(error)
        return []

    }
}

const decodeBinToMessage = (binData)=>{

    while(binData.length >0 && binData[binData.length-1][0]==0){
        binData.pop()
    }
    let decoded_string=""

    let j = 0;
    const length = binData.length

    while(j < length){
        if(binData[j]==1){
            if(j+1 == length || binData[j+1]==0){
                decoded_string += "."
                j += 1
            }else{
                decoded_string += "-"
                j += 2
            }
        }else if( j+1 < length &&  binData[j+1]== 0) {
            if(j+2 == length || binData[j+2]==1){
                decoded_string += " "
                j += 2
            }else {
                decoded_string += "  "
                j += 4
            }
        }else{
            j++
        }      
    }
    
    const decodeMessage = (morseCode) => {
        let words = morseCode.split("  ");
        let message = ""
        for(let j=0; j < words.length; j++) {
            let codes = words[j].split(" ");
            for (let i = 0; i < codes.length; i++) {
                message += morseToAlphabetMap[codes[i]];
            }
            message += " "
        }
        return message;
    };
    
    const message = decodeMessage(decoded_string)

    console.log(decoded_string)
    console.log(message)

    return message

}

export { decodeToBin, decodeBinToMessage };